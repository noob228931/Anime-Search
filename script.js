document.addEventListener('DOMContentLoaded', () => {
    const searchInput = document.getElementById('searchInput');
    const searchButton = document.getElementById('searchButton');
    const resultsDiv = document.getElementById('results');

    async function searchAnime(query) {
        try {
            const response = await fetch(`https://api.jikan.moe/v4/anime?q=${query}`);
            const data = await response.json();
            return data.data;
        } catch (error) {
            console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –¥–∞–Ω–∏—Ö:', error);
            return [];
        }
    }

    function displayResults(animeList) {
        resultsDiv.innerHTML = '';
        
        animeList.forEach(anime => {
            const animeCard = document.createElement('div');
            animeCard.className = 'anime-card';
            
            const translatedGenres = anime.genres?.map(g => translateGenre(g.name)).slice(0, 3).join(', ') || '–ù–µ–≤—ñ–¥–æ–º–æ';
            const status = translateStatus(anime.status);
            const year = new Date(anime.aired?.from).getFullYear() || '–ù–µ–≤—ñ–¥–æ–º–æ';
            const season = translateSeason(anime.season);
            const rating = (anime.score || '??') + '/10';
            
            animeCard.innerHTML = `
                <img src="${anime.images.jpg.image_url}" alt="${anime.title}">
                <div class="anime-info">
                    <h3>${anime.title}</h3>
                    <div class="anime-stats">
                        <span>‚≠ê ${rating}</span>
                        <span>üì∫ ${anime.episodes || '??'} –µ–ø.</span>
                    </div>
                    <p>
                        <span class="tag">${year}</span>
                        <span class="tag">${status}</span>
                        ${season ? `<span class="tag">${season}</span>` : ''}
                    </p>
                    <div class="tags-container">
                        ${anime.genres?.map(g => 
                            `<span class="tag">${translateGenre(g.name)}</span>`
                        ).join('') || ''}
                    </div>
                </div>
            `;
            
            animeCard.addEventListener('click', () => {
                window.open(anime.url, '_blank');
            });
            
            resultsDiv.appendChild(animeCard);
        });
    }

    function translateGenre(genre) {
        const genreMap = {
            'Action': '–ë–æ–π–æ–≤–∏–∫',
            'Adventure': '–ü—Ä–∏–≥–æ–¥–∏',
            'Comedy': '–ö–æ–º–µ–¥—ñ—è',
            'Drama': '–î—Ä–∞–º–∞',
            'Fantasy': '–§–µ–Ω—Ç–µ–∑—ñ',
            'Horror': '–ñ–∞—Ö–∏',
            'Mystery': '–ú—ñ—Å—Ç–∏–∫–∞',
            'Romance': '–†–æ–º–∞–Ω—Ç–∏–∫–∞',
            'Sci-Fi': '–ù–∞—É–∫–æ–≤–∞ —Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞',
            'Slice of Life': '–ü–æ–≤—Å—è–∫–¥–µ–Ω–Ω—ñ—Å—Ç—å',
            'Sports': '–°–ø–æ—Ä—Ç',
            'Supernatural': '–ù–∞–¥–ø—Ä–∏—Ä–æ–¥–Ω–µ',
            'Thriller': '–¢—Ä–∏–ª–µ—Ä',
            'Mecha': '–ú–µ—Ö–∞',
            'Music': '–ú—É–∑–∏–∫–∞',
            'Psychological': '–ü—Å–∏—Ö–æ–ª–æ–≥—ñ—è',
            'School': '–®–∫–æ–ª–∞',
            'Shounen': '–°—å–æ–Ω–µ–Ω',
            'Shoujo': '–°—å–æ–¥–∑—å–æ',
            'Magic': '–ú–∞–≥—ñ—è',
            'Military': '–í—ñ–π—Å—å–∫–æ–≤–µ',
            'Historical': '–Ü—Å—Ç–æ—Ä–∏—á–Ω–µ',
            'Super Power': '–°—É–ø–µ—ÄÔøΩÔøΩ–∏–ª–∏',
            'Vampire': '–í–∞–º–ø—ñ—Ä–∏',
            'Martial Arts': '–ë–æ–π–æ–≤—ñ –º–∏—Å—Ç–µ—Ü—Ç–≤–∞',
            'Samurai': '–°–∞–º—É—Ä–∞—ó',
            'Demons': '–î–µ–º–æ–Ω–∏',
            'Space': '–ö–æ—Å–º–æ—Å'
        };
        return genreMap[genre] || genre;
    }

    function translateStatus(status) {
        const statusMap = {
            'Finished Airing': '–ó–∞–≤–µ—Ä—à–µ–Ω–æ',
            'Currently Airing': '–í–∏—Ö–æ–¥–∏—Ç—å',
            'Not yet aired': '–©–µ –Ω–µ –≤–∏–π—à–ª–æ'
        };
        return statusMap[status] || status;
    }

    function translateSeason(season) {
        const seasonMap = {
            'spring': '–í–µ—Å–Ω–∞',
            'summer': '–õ—ñ—Ç–æ',
            'fall': '–û—Å—ñ–Ω—å',
            'winter': '–ó–∏–º–∞'
        };
        return seasonMap[season] || '';
    }

    // –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –ø–æ–¥—ñ–π
    searchButton.addEventListener('click', async () => {
        const query = searchInput.value.trim();
        if (query) {
            const results = await searchAnime(query);
            displayResults(results);
        }
    });

    searchInput.addEventListener('keypress', async (e) => {
        if (e.key === 'Enter') {
            const query = searchInput.value.trim();
            if (query) {
                const results = await searchAnime(query);
                displayResults(results);
            }
        }
    });
}); 